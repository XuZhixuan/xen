.build-tmpl: &build
  stage: build
  image: registry.gitlab.com/xen-project/xen/${CONTAINER}
  script:
    - ./automation/scripts/build 2>&1 | tee build.log
  artifacts:
    paths:
      - binaries/
      - xen-config
      - xen-cppcheck.txt
      - '*.log'
      - '*/*.log'
    when: always
  except:
    - master
    - smoke
    - /^coverity-tested\/.*/
    - /^stable-.*/

.gcc-tmpl:
  variables: &gcc
    CC: gcc
    CXX: g++

.clang-tmpl:
  variables: &clang
    CC: clang
    CXX: clang++
    clang: y

.x86-64-build-tmpl:
  <<: *build
  variables:
    XEN_TARGET_ARCH: x86_64
  tags:
    - x86_64

.x86-64-build:
  extends: .x86-64-build-tmpl
  variables:
    debug: n

.x86-64-build-debug:
  extends: .x86-64-build-tmpl
  variables:
    debug: y

.x86-32-build-tmpl:
  <<: *build
  variables:
    XEN_TARGET_ARCH: x86_32
  tags:
    - x86_32

.x86-32-build:
  extends: .x86-32-build-tmpl
  variables:
    debug: n

.x86-32-build-debug:
  extends: .x86-32-build-tmpl
  variables:
    debug: y

.gcc-x86-64-build:
  extends: .x86-64-build
  variables:
    <<: *gcc

.gcc-x86-64-build-debug:
  extends: .x86-64-build-debug
  variables:
    <<: *gcc

.gcc-x86-32-build:
  extends: .x86-32-build
  variables:
    <<: *gcc

.gcc-x86-32-build-debug:
  extends: .x86-32-build-debug
  variables:
    <<: *gcc

.clang-x86-64-build:
  extends: .x86-64-build
  variables:
    <<: *clang

.clang-x86-64-build-debug:
  extends: .x86-64-build-debug
  variables:
    <<: *clang

.clang-x86-32-build:
  extends: .x86-32-build
  variables:
    <<: *clang

.clang-x86-32-build-debug:
  extends: .x86-32-build-debug
  variables:
    <<: *clang

.arm32-cross-build-tmpl:
  <<: *build
  variables:
    XEN_TARGET_ARCH: arm32
  tags:
    - arm64

.arm32-cross-build:
  extends: .arm32-cross-build-tmpl
  variables:
    debug: n

.arm32-cross-build-debug:
  extends: .arm32-cross-build-tmpl
  variables:
    debug: y

.gcc-arm32-cross-build:
  extends: .arm32-cross-build
  variables:
    <<: *gcc

.gcc-arm32-cross-build-debug:
  extends: .arm32-cross-build-debug
  variables:
    <<: *gcc

.arm64-build-tmpl:
  <<: *build
  variables:
    XEN_TARGET_ARCH: arm64
  tags:
    - arm64

.arm64-build:
  extends: .arm64-build-tmpl
  variables:
    debug: n

.arm64-build-debug:
  extends: .arm64-build-tmpl
  variables:
    debug: y

.gcc-arm64-build:
  extends: .arm64-build
  variables:
    <<: *gcc

.gcc-arm64-build-debug:
  extends: .arm64-build-debug
  variables:
    <<: *gcc

.riscv64-cross-build-tmpl:
  <<: *build
  variables:
    XEN_TARGET_ARCH: riscv64
  tags:
    - x86_64

.riscv64-cross-build:
  extends: .riscv64-cross-build-tmpl
  variables:
    debug: n

.riscv64-cross-build-debug:
  extends: .riscv64-cross-build-tmpl
  variables:
    debug: y

.gcc-riscv64-cross-build:
  extends: .riscv64-cross-build
  variables:
    <<: *gcc

.gcc-riscv64-cross-build-debug:
  extends: .riscv64-cross-build-debug
  variables:
    <<: *gcc

.yocto-test:
  stage: build
  image: registry.gitlab.com/xen-project/xen/${CONTAINER}
  except:
    - master
    - smoke
    - /^coverity-tested\/.*/
    - /^stable-.*/
  script:
    - ./automation/build/yocto/build-yocto.sh -v --log-dir=./logs --xen-dir=`pwd` ${YOCTO_BOARD} ${YOCTO_OUTPUT}
  variables:
    YOCTO_VERSION: kirkstone
    CONTAINER: yocto:${YOCTO_VERSION}-${YOCTO_BOARD}-${YOCTO_HOST}
  artifacts:
    paths:
      - 'logs/*'
      - binaries/
    when: always
  needs: []

.yocto-test-arm64:
  extends: .yocto-test
  variables:
    YOCTO_HOST: arm64v8
  tags:
    - arm64

# This is not used by any test job as we only run Yocto on arm based machines.
# Keep it here so that someone having x86 hardware can easily add jobs.
.yocto-test-x86-64:
  extends: .yocto-test
  variables:
    YOCTO_HOST: amd64
  tags:
    - x86_64

.x86-64-cross-build-tmpl:
  <<: *build
  variables:
    XEN_TARGET_ARCH: x86_64
  tags:
    - arm64

.x86-64-cross-build:
  extends: .x86-64-cross-build-tmpl
  variables:
    debug: n

.gcc-x86-64-cross-build:
  extends: .x86-64-cross-build
  variables:
    <<: *gcc

## Test artifacts common

.test-jobs-artifact-common:
  stage: build
  except: !reference [.test-jobs-common, except]

# Arm test artifacts

# x86_64 test artifacts

# riscv64 test artifacts

busybox-1.31.6-riscv64-rootfs-export:
  extends: .test-jobs-artifact-common
  image: registry.gitlab.com/xen-project/people/olkur/xen/tests-artifacts/initrd:1.31.6-busybox-riscv64
  script:
    - mkdir binaries && cp /initrd.img binaries/initrd.img
  artifacts:
    paths:
      - binaries/initrd.img
  tags:
    - x86_64

kernel-6.4-riscv64-export:
  extends: .test-jobs-artifact-common
  image: registry.gitlab.com/xen-project/people/olkur/xen/tests-artifacts/kernel:6.4-riscv64
  script:
    - mkdir binaries && cp /Image.gz binaries/Image.gz
  artifacts:
    paths:
      - binaries/Image.gz
  tags:
    - x86_64

qemu-system-riscv64-8.2.0-riscv64-export:
  extends: .test-jobs-artifact-common
  image: registry.gitlab.com/xen-project/people/olkur/xen/tests-artifacts/qemu-system-riscv64:8.2.0-riscv64
  script:
    - mkdir binaries && cp /qemu-system-riscv64 /opensbi-riscv64-generic-fw_dynamic.bin binaries/
  artifacts:
    paths:
      - binaries/qemu-system-riscv64
      - binaries/opensbi-riscv64-generic-fw_dynamic.bin
  tags:
    - x86_64

kernel-6.6-aia-support-riscv64-export:
  extends: .test-jobs-artifact-common
  image: registry.gitlab.com/xen-project/people/olkur/xen/tests-artifacts/kernel:6.6-aia-support-riscv64
  script:
    - mkdir binaries && cp /Image.gz binaries/Image.gz
  artifacts:
    paths:
      - binaries/Image.gz
  tags:
    - x86_64

qemu-system-riscv64-8.2.0-aia-riscv64-export:
  extends: .test-jobs-artifact-common
  image: registry.gitlab.com/xen-project/people/olkur/xen/tests-artifacts/qemu-system-riscv64:8.2.0-aia-riscv64
  script:
    - mkdir binaries && cp /qemu-system-riscv64 /opensbi-riscv64-generic-fw_dynamic.bin binaries/
  artifacts:
    paths:
      - binaries/qemu-system-riscv64
      - binaries/opensbi-riscv64-generic-fw_dynamic.bin
  tags:
    - x86_64

busybox-aia-1.31.6-riscv64-rootfs-export:
  extends: .test-jobs-artifact-common
  image: registry.gitlab.com/xen-project/people/olkur/xen/tests-artifacts/initrd:1.31.6-busybox-aia-riscv64
  script:
    - mkdir binaries && cp /initrd.img binaries/initrd.img
  artifacts:
    paths:
      - binaries/initrd.img
  tags:
    - x86_64

# Jobs below this line

# Build jobs needed for tests

# Arm32 cross-build

# Arm builds

# RISC-V 64 cross-build
include: 'automation/gitlab-ci/riscv-fixed-randconfig.yaml'

archlinux-current-gcc-riscv64:
  extends: .gcc-riscv64-cross-build
  variables:
    CONTAINER: archlinux:current-riscv64
    KBUILD_DEFCONFIG: tiny64_defconfig
    HYPERVISOR_ONLY: y

archlinux-current-gcc-riscv64-debug:
  extends: .gcc-riscv64-cross-build-debug
  variables:
    CONTAINER: archlinux:current-riscv64
    KBUILD_DEFCONFIG: tiny64_defconfig
    HYPERVISOR_ONLY: y

archlinux-current-gcc-riscv64-randconfig:
  extends: .gcc-riscv64-cross-build
  variables:
    CONTAINER: archlinux:current-riscv64
    KBUILD_DEFCONFIG: tiny64_defconfig
    RANDCONFIG: y
    EXTRA_FIXED_RANDCONFIG: !reference [.riscv-fixed-randconfig, variables, EXTRA_FIXED_RANDCONFIG]

archlinux-current-gcc-riscv64-debug-randconfig:
  extends: .gcc-riscv64-cross-build-debug
  variables:
    CONTAINER: archlinux:current-riscv64
    KBUILD_DEFCONFIG: tiny64_defconfig
    RANDCONFIG: y
    EXTRA_FIXED_RANDCONFIG: !reference [.riscv-fixed-randconfig, variables, EXTRA_FIXED_RANDCONFIG]

